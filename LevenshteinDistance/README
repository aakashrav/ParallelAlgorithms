A parallelized program to compute the Levenshtein distance between two strings using C++11 Multithreading constructs such as futures, promises, and threads.

Usage levenshtein_distance <word_one> <word_two> <num_threads_in_diagonal>

For details on the serial Levenshtein Distance algorithm involving dynamic programming and recursion, please refer to http://oldfashionedsoftware.com/tag/levenshtein-distance/

Here we describe an algorithm for parallelizing the process, assuming the reader already understand the serial implementation.

Diagonal Algorithm:

We see that entry (i,j) in the Levenshtein distance matrix is recursively dependent on 3 values: entry (i,j-1), entry (i-1,j-1), and entry (i-1,j). Moreover, if we draw a diagonal line running through the matrix and crossing entry (i,j), then we see that (i,j-1), (i-1,j-1), and (i-1,j) are all contained to the left of the diagonal. Therefore, we split up the filling of the matrix by diagonals. First, we fill in the entries in the first diagonal line crossing the upper left-hand corner of the matrix (it will contain just entry [0,0]). Then, we move on to the second diagonal line containing entries [1,0] and [0,1], and so on and so forth, till we reach the very last entry on the opposite end of the matrix. This method works since as mentioned earlier, each diagonal depends only the diagonals computed before it.

This is still a serial program, however, and therefore for a parallel implementation we need one more addition step:
For each diagonal, we will split the filling of the diagonal into many parts - each part will be assigned to one thread. The reason this is efficacious is because the entries in any arbitrary diagonal donâ€™t depend upon each other to be filled - they only depend upon entries filled in the previous diagonals. Hence, there is no point in filling the diagonals serially as there is no dependency, and therefore we find a key bottleneck where we can introduce parallelism. We thereby split each diagonal into a number of sub-diagonals corresponding to the level of granularity the user requires, and then assign each of these sub diagonals to a separate thread for filling; hence obtaining our parallel algorithm. 

Note that this diagonal method will be useless for small strings as the overhead for managing the threads will outweigh any speedup we gain. However for large strings, appropriate granularity, and suitable hardware, the diagonal method can offer substantial speedup. 